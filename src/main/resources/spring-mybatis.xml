<?xml version="1.0" encoding="utf-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
    		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd 
			http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd 
			http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd 
			http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.0.xsd 
			http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd ">
	<!-- 自动扫描(自动注入) -->
	<context:component-scan base-package="com.common.district;"/>
	<bean id="log-filter" class="com.alibaba.druid.filter.logging.Log4jFilter">
    	<property name="resultSetLogEnabled" value="true" />
	</bean>
	<!-- 配置数据源 第一数据源（写库） -->
	<bean name="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<property name="url" value="${jdbc.url}" /> 
		<property name="username" value="${jdbc.username}" /> 
		<property name="password" value="${jdbc.password}" /> 
		<property name="initialSize" value="3" /> 
	    <property name="minIdle" value="10" /> 
	    <property name="maxActive" value="1000" /> 
	    <property name="maxWait" value="60000" /> 
	    <property name="timeBetweenEvictionRunsMillis" value="60000" /> 
	    <property name="minEvictableIdleTimeMillis" value="30000" /> 
	    <property name="validationQuery" value="SELECT 'x'" />
	    <property name="testWhileIdle" value="true" /> 
	    <property name="testOnBorrow" value="true" />
	    <property name="testOnReturn" value="true" />
	    <property name="removeAbandoned" value="true" />
	    <property name="filters" value="stat" />
		<!-- 关闭abanded连接时输出错误日志 -->
		<property name="logAbandoned" value="false" />
		<property name="connectionProperties" 
				  value="useUnicode=true;characterEncoding=utf8;connectTimeout=5000;socketTimeout=60000;autoReconnect=true;failOverReadOnly=false"/>
		<property name="proxyFilters">
	        <list>
	            <ref bean="log-filter"/>
	        </list>
	    </property>
	</bean>

	<!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="mapperLocations">
			<array>
				<value>classpath*:com/common/district/*/dao/mapper/*.xml</value>
			</array>
		</property>
		<property name="plugins">
			<array>
				<bean class="com.github.pagehelper.PageHelper">
					<property name="properties">
						<value>
							dialect=hsqldb
							reasonable=true
						</value>
					</property>
				</bean>
			</array>
		</property>
	</bean>

	<!-- DAO接口所在包名，Spring会自动查找其下的类 -->
	<bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.common.district.*.dao" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
	</bean>

	<!-- (事务管理) -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="publish*" propagation="REQUIRED" rollback-for="Exception.class" />
			<tx:method name="save*" propagation="REQUIRED" rollback-for="Exception.class" />
			<tx:method name="add*" propagation="REQUIRED" rollback-for="Exception.class" />
			<tx:method name="update*" propagation="REQUIRED" rollback-for="Exception.class" />
			<tx:method name="insert*" propagation="REQUIRED" rollback-for="Exception.class" />
			<tx:method name="create*" propagation="REQUIRED" rollback-for="Exception.class" />
			<tx:method name="del*" propagation="REQUIRED" rollback-for="Exception.class" />
			<tx:method name="load*"  propagation="REQUIRED" rollback-for="Exception.class"/>
			<tx:method name="init*" propagation="REQUIRED" rollback-for="Exception.class" />
			<tx:method name="*"  read-only="true"/>
		</tx:attributes>
	</tx:advice>

	<!--<aop:config>
		<aop:pointcut id="myPointcut" expression="execution(* com.common.district.*.service.impl.*.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="myPointcut" />
	</aop:config>-->

	<!-- 事务注解驱动，标注@Transactional的类和方法将具有事务性 -->
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>
</beans>